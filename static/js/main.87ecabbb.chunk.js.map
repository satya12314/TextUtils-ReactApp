{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","Textform","str","useState","text","setText","wordCounter","length","replace","split","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","Newtext","toUpperCase","newText","toLowerCase","trim","Alert","height","alert","role","word","lower","charAt","slice","capitalize","message","defaultProps","about","App","setMode","setalert","showAlert","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.87ecabbb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\n// import {  a  } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-a\" to=\"/about\">{props.about}</a>\r\n                        </li> */}\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckChecked\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckD   efault\">Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    about: \"about here\"\r\n}\r\n","\r\n\r\nimport React, { useState } from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n    const handleUpperCaseClick = () => {\r\n\r\n        let Newtext = text.toUpperCase();\r\n        setText(Newtext)\r\n    }\r\n    const handleLowerCaseClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n    }\r\n    const handleExtraSpaceClick = () => {\r\n        let newText = text.replace(/\\s+/g, ' ').trim();\r\n        setText(newText);\r\n    }\r\n    const handleOnChange = (event) => {\r\n\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n\r\n    const wordCounter = (str) => {\r\n        if (str.length === 0) { return 0; }\r\n        str = str.replace(/(^\\s*)|(\\s*$)/gi, \"\");  //remove start and end spaces of a string\r\n        str = str.replace(/[ ]{2,}/gi, \" \");  // reduce multiple spaces to a single space.\r\n        str = str.replace(/\\n /, \"\\n\");  // exclude a new line with a start spacing.\r\n        return str.split(/\\s+/).length;   //return the no of words\r\n    }\r\n\r\n    const CharCounter = (str) => {\r\n        str = str.replace(/ /g, '');\r\n        return str.length;   //return the no of words\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container' style={{ color: props.mode === 'dark' ? 'white' : '#042743' }} >\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\" >\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? '#13466e' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} id=\"exampleFormControlTextarea1\" rows=\"5\"></textarea>\r\n                </div>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-2\" onClick={handleUpperCaseClick}>Convert to Upper Case</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-2\" onClick={handleLowerCaseClick}>Convert to Lower Case</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary my-2 mx-2\" onClick={handleExtraSpaceClick}>Remove Extra Space</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }} >\r\n                <h2>Text Summary</h2>\r\n                <p>your text contains <b> {wordCounter(text)} </b> words and <b> {CharCounter(text)} </b> characters </p>\r\n                <p>Time taken to read the text <b> {0.008 * wordCounter(text)} </b> minutes</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length > 0 ? text : \"Nothing to Preview\"}</p>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                {/* <strong>Holy guacamole!</strong> You should check in on some of those fields below. */}\r\n                <strong>{capitalize(props.alert.type)}</strong>:{props.alert.message}\r\n      \r\n            </div>}\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n","// import logo from './logo.svg';\r\nimport './App.css';\r\n// import About from './components/About';\r\nimport Navbar from './components/Navbar';\r\nimport Textform from './components/Textform';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\n\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route\r\n//   // Link\r\n// } from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light');\r\n  const [alert, setalert] = useState(null);\r\n  const showAlert=(message,type)=>{\r\n      setalert({\r\n        message:message,\r\n        type:type\r\n      })\r\n      setTimeout(()=>{\r\n        setalert(null)\r\n      },3000)\r\n  }\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark')\r\n      document.body.style.backgroundColor = '#042743'\r\n      showAlert(\"Dark Mode Enabled\",\"success\")\r\n    }\r\n    else {\r\n      setMode('light')\r\n      document.body.style.backgroundColor = 'white'\r\n      showAlert(\"Light Mode Enabled\",\"success\")\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      {/* Component-1 */}\r\n      {/* <Router> */}\r\n      {/* --- 1st component */}\r\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />  \r\n      {/* --- 2nd components */}\r\n     <strong><Alert alert={alert}/></strong>\r\n      {/* <Navbar/> */}\r\n      <div className=\"container my-3\">\r\n        {/*  components-2 */}\r\n\r\n        {/* <Switch> */}\r\n          {/* <Route exact path=\"/about\">\r\n            <About mode={mode} />\r\n          </Route>   */}\r\n         \r\n          \r\n          {/* <Route exact path=\"/\"> */}\r\n          <Textform heading=\"TextUtils- Text Counter, Character Counter, Remove Extra Spaces\" mode={mode} /> \r\n      \r\n          {/* </Route> */}\r\n        {/* </Switch> */}\r\n\r\n        \r\n        {/* <About/> */}\r\n      </div>\r\n      {/* </Router> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}